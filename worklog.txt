- project created using npm init

- express is installed

- joi is installed : to validate data received from the api

- basic routing to home page is tested

- listening to port 3000 locally

- installing nodemon for automatic reloading on browser on save

- api for all rest operations related to user is created 

- ##throws error when res.send() is used multiple times within a middleware ..
    occurs when there is fail request module is excuted .

- using built-in middlewares | use only required middleware as it will slow down the reques res pipleline
    1. url encoder : to pass value via url rather than body of the request () 
        | old method not using now need to know why
    2. json : parse the req into json format
    3. static : can load the static file that are in "name" diretory
        eg: console.log(user);

- custom middlewares for logging and authentication
    1. logger.js : to maintain a log
    2. autthentication | within index.js file itself

- 3rd party middleware
    1. helmet : security middleware adds http headers 
    2. morgan : api logger | use only on development => validate whether env variable = development

- environment variable used to let us have differant env for development , production, testing 
    app.get(env) : returns the development mode 
    env value can be set on cmd with following cmd => export NODE_ENV= production 
    | must use when moving the project to production

- configuration setting that will maintain differant mail server and database for production and development
    json files are created under config folder which are automaticaly changed based on the NODE_ENV value

- config files are easily accessible so do not store the pwd details with config | one company is hacked 
    DO save pwd with env => export appname_password=pwd this {appname_password} has to be unique 

- install dotenv using npm / this file is used to add values like db_pwd which then can be assigned to config file
    it has key=value structure . this can be accessed with process.env.{key}
    this .env must not be included in the source or git repository as it has sensible info
    inorder to use dotenv .. i have customised custom-environment-variable as js to have full config =https://github.com/schikin/example-node-config

- in a heavier application doing checking with console.log and managing it is tedious process
    so we use debugging package and env variable to disable and enable it on development
    it also helps to see the categorised debug like debug related to database

- npm i debug , require it and create debugger like for startup, db , authentication extra 
    set env variable DEBUG= app:*/ app:startup,app:db/ or one value or nothing
    need to set env variable | on production

- project structures is reconfigured to pages and routes , which are seperated from the index.js 

- installing mongodb using brew

- creating user schema and model 

- Added git repository and synced with remote using ssh

- completed all database CRUD operation

- installing babel 
    https://www.robinwieruch.de/minimal-node-js-babel-setup/
    completed successfully

- syncing api with model : done

- adding distributor model and api
    issue : creating password

- hashing password with bcyprt and password complexity with joi-complexity
- adding logging authentication(idetifying the user for integrity)
    -password verification done 
    - JSON web token passing : done
    , authorization(if user has rights to perform the operation), :done
    - getting current user name after looged in : done
    - token that we are generating are not stored in any place at server so logout feature has to be wriiten on the client side

    instead of doing /:id we do /me so that the user after logged cannot view other user information via /:id using their id
    permission(2nd level of authorization) 
    - on registering we need to login the user automatically so that he doesnt need to login again
    we are adding isAdmin variable to user on genAuth function to create the jwt with digital signature 
    so that other user cannot make themselves as admin by changing the value of the isAdmin
    for each role we have to write middleware to determine whether it is what who they say are
    to pass two middlewares to router use array
    application may have more number of roles in that case use array and bigger application use operations[] in user model which 
    then can be checked whether he can perform that particular intended operation

- error handling 
    mongodb server if disconnected then the thread will coldes so even if the server backs up on again it will not be able to perform 
    so we need to catch error whenever we a re awaiting
creating error handle middleware since we cannot apply to all the available router inviducallly when there is a change
- loggin the application

-  application refactored

- test framework implementation
    test cases must be greater than number of execution paths
    when testing for string use regular expression rather than expect.toBe
    when testing array , test irrespective of array location like toContain or expect.toequal(expect.arrayContaining([]))
    when testing object expect.toEqual({"key": value,"key": value}), toMatchObject({}}) when you want list only seleted property
        toBe(), toEqual() will be specific test , keep in mind we dont need toospecific or too general
    when testing exception use expect( ()=>{fileName.function(value)}).toThrow()
    use --watchAll within package.json test script to avoid the repeatative task of running test everytime 
        it runs automatically when you save
    --verbose is used to display extra information that helps us to troubleshoot
    have a differant database for testing the operations since it involves removing and adding documents
    
- process manager used to make clean exit while there is error and restart the process



################################################ NOTE ###################################################
- if you building api application then neglect the pages and views 